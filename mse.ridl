// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Libary Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 19/01/2017 21:21:17 (- $Rev: 12980 $, 51993937).

[
  uuid(D2E0BDE0-EB2F-11D2-94E7-444553540000), 
  version(0.13), 
  helpstring("Model Scene Editor Library")
    
]
library model
{

  importlib("stdole2.tlb");

  interface IModelScene;
  coclass ModelSceneEditor;
  interface IModelTexture;
  interface IModelShape;


  [
    uuid(D2E0BDE5-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    helpstring("Views supported by Model Scene Editor")
  ]
  enum ModelView
  {
    ViewFront = 0, 
    ViewBack = 1, 
    ViewTop = 2, 
    ViewBottom = 3, 
    ViewLeft = 4, 
    ViewRight = 5, 
    ViewCamera = 6
  };

  [
    uuid(D2E0BDE6-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    helpstring("Shapes supported by Model Scene Editor")
  ]
  enum ModelShape
  {
    ShapeCamera = 0, 
    ShapeLight = 1, 
    ShapeSpotLight = 2, 
    ShapeCylinderLight = 3, 
    ShapeAreaLight = 4, 
    ShapePlane = 5, 
    ShapeSphere = 6, 
    ShapeCube = 7, 
    ShapeSolid = 8, 
    ShapePolygon = 9, 
    ShapeHeightField = 10, 
    ShapeBicubic = 11, 
    ShapeUser = 12, 
    ShapeGroup = 13, 
    ShapeGallery = 14, 
    ShapeDisc = 15, 
    ShapeTorus = 16, 
    ShapeSuperEllipsoid = 17, 
    ShapeText = 18, 
    ShapeLathe = 19, 
    ShapeJuliaFractal = 20, 
    ShapeScripted = 21, 
    ShapeSpring = 23
  };

  [
    uuid(D2E0BDE7-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    helpstring("Textures supported by Model Scene Editor")
  ]
  enum ModelTexture
  {
    TextureColour = 0, 
    TextureAgate = 1, 
    TextureAverage = 2, 
    TextureBozo = 3, 
    TextureBrick = 4, 
    TextureBumps = 5, 
    TextureChecker = 6, 
    TextureCrackle = 7, 
    TextureDents = 8, 
    TextureGradient = 9, 
    TextureGranite = 10, 
    TextureHexagon = 11, 
    TextureLeopard = 12, 
    TextureMandelbrot = 13, 
    TextureMarble = 14, 
    TextureOnion = 15, 
    TextureQuilted = 16, 
    TextureRadial = 17, 
    TextureRipples = 18, 
    TextureSpiral1 = 19, 
    TextureSpiral2 = 20, 
    TextureSpotted = 21, 
    TextureWaves = 22, 
    TextureWood = 23, 
    TextureWrinkles = 24, 
    TextureMap = 25, 
    TextureImage = 26, 
    TextureSpiral = 27
  };

  [
    uuid(D2E0BDE8-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    helpstring("Model Scene"), 
    dual, 
    oleautomation
  ]
  interface IModelScene: IDispatch
  {
    [id(0x00000001), helpstring("Get count of textures in the scene")]
    HRESULT _stdcall GetTextureCount([out, retval] long* Value);
    [id(0x00000002), helpstring("Get count of shapes in scene")]
    HRESULT _stdcall GetShapeCount([out, retval] long* Value);
    [id(0x00000003), helpstring("Load a scene file")]
    HRESULT _stdcall LoadScene([in] BSTR Filename);
    [id(0x00000004), helpstring("Save scene to a file")]
    HRESULT _stdcall SaveScene([in] BSTR Filename);
    [id(0x00000005)]
    HRESULT _stdcall GetTexture([in] long Index, [out, retval] IModelTexture** Value);
    [id(0x00000006)]
    HRESULT _stdcall CreateTexture([in] enum ModelTexture TextureType, [in] BSTR Name, [out, retval] IModelTexture** Value);
    [id(0x00000007)]
    HRESULT _stdcall GetShape([in] long Index, [out, retval] IModelShape** Value);
    [id(0x00000008)]
    HRESULT _stdcall CreateShape([in] enum ModelShape ShapeType, [in] BSTR Name, [out, retval] IModelShape** Value);
  };

  [
    uuid(D2E0BDEA-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    helpstring("Texture object"), 
    dual, 
    oleautomation
  ]
  interface IModelTexture: IDispatch
  {
    [id(0x00000001)]
    HRESULT _stdcall GetName([out, retval] BSTR* Value);
    [id(0x00000002)]
    HRESULT _stdcall SetName([in] BSTR Name);
    [id(0x00000003)]
    HRESULT _stdcall GetColour([out] double* Red, [out] double* Green, [out] double* Blue, [out] double* Filter, [out] double* Transmit);
    [id(0x00000004)]
    HRESULT _stdcall SetColour([in] double Red, [in] double Green, [in] double Blue, [in] double Filter, [in] double Transmit);
    [id(0x00000005)]
    HRESULT _stdcall GetAttributes([out, retval] VARIANT* Value);
    [id(0x00000006)]
    HRESULT _stdcall SetAttributes([in] VARIANT Attributes);
  };

  [
    uuid(D2E0BDEC-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IModelShape: IDispatch
  {
    [id(0x00000001)]
    HRESULT _stdcall GetName([out, retval] BSTR* Value);
    [id(0x00000002)]
    HRESULT _stdcall SetName([in] BSTR Name);
    [id(0x00000003)]
    HRESULT _stdcall GetTexture([out, retval] IModelTexture** Value);
    [id(0x00000004)]
    HRESULT _stdcall SetTexture([in] IModelTexture* Texture);
    [id(0x00000005)]
    HRESULT _stdcall GetAttributes([out, retval] VARIANT* Value);
    [id(0x00000006)]
    HRESULT _stdcall SetAttributes([in] VARIANT Attributes);
    [id(0x00000007)]
    HRESULT _stdcall GetTranslation([out] double* X, [out] double* Y, [out] double* Z);
    [id(0x00000008)]
    HRESULT _stdcall SetTranslation([in] double X, [in] double Y, [in] double Z);
    [id(0x00000009)]
    HRESULT _stdcall GetScale([out] double* X, [out] double* Y, [out] double* Z);
    [id(0x0000000A)]
    HRESULT _stdcall SetScale([in] double X, [in] double Y, [in] double Z);
    [id(0x0000000B)]
    HRESULT _stdcall GetRotation([out] double* X, [out] double* Y, [out] double* Z);
    [id(0x0000000C)]
    HRESULT _stdcall SetRotation([in] double X, [in] double Y, [in] double Z);
  };

  [
    uuid(D2E0BDE3-EB2F-11D2-94E7-444553540000), 
    version(1.0), 
    helpstring("ModelSceneEditor Object"), 
    appobject, 
    predeclid
  ]
  coclass ModelSceneEditor
  {
    [default] interface IModelScene;
  };

};